{
  "test_set_name": "Technical Expert Persona Tests",
  "persona_type": "technical",
  "created_at": "2025-06-10",
  "description": "Test cases for technical expert persona prompt evaluation",
  "test_cases": [
    {
      "id": "tech_001",
      "category": "Software Architecture",
      "query": "How do I design a scalable microservices architecture?",
      "expected_keywords": ["microservices", "scalability", "architecture", "services", "deployment"],
      "expected_tone": "technical",
      "success_criteria": {
        "min_score": 8,
        "must_include_citations": true,
        "should_include_code_examples": false
      },
      "sample_chunks": [
        {
          "text": "Microservices architecture is a design pattern where applications are built as a collection of loosely coupled services. Each service is responsible for a specific business function and can be developed, deployed, and scaled independently.",
          "source": "Software Architecture Guide",
          "source_type": "document"
        }
      ]
    },
    {
      "id": "tech_002", 
      "category": "Database Optimization",
      "query": "What are the best practices for optimizing database queries?",
      "expected_keywords": ["indexing", "execution plan", "performance", "optimization", "query"],
      "expected_tone": "technical",
      "success_criteria": {
        "min_score": 8,
        "must_include_citations": true,
        "should_include_code_examples": true
      },
      "sample_chunks": [
        {
          "text": "Database query optimization involves several techniques: proper indexing, analyzing execution plans, avoiding N+1 queries, and using appropriate data types. Indexes can dramatically improve query performance by reducing the number of rows scanned.",
          "source": "Database Performance Tuning",
          "source_type": "document"
        }
      ]
    },
    {
      "id": "tech_003",
      "category": "API Design",
      "query": "How should I design RESTful APIs for a large-scale application?",
      "expected_keywords": ["REST", "API", "endpoints", "HTTP", "design", "scalability"],
      "expected_tone": "technical",
      "success_criteria": {
        "min_score": 7,
        "must_include_citations": true,
        "should_include_code_examples": false
      },
      "sample_chunks": [
        {
          "text": "RESTful API design follows specific principles: use HTTP methods appropriately (GET, POST, PUT, DELETE), design clear and consistent URL patterns, implement proper error handling with HTTP status codes, and version your APIs.",
          "source": "API Design Best Practices",
          "source_type": "document"
        }
      ]
    },
    {
      "id": "tech_004",
      "category": "Security",
      "query": "What are the most important security considerations for web applications?",
      "expected_keywords": ["security", "authentication", "authorization", "HTTPS", "vulnerabilities"],
      "expected_tone": "technical",
      "success_criteria": {
        "min_score": 9,
        "must_include_citations": true,
        "should_include_code_examples": false
      },
      "sample_chunks": [
        {
          "text": "Web application security requires multiple layers of protection: HTTPS encryption, proper authentication and authorization, input validation, SQL injection prevention, XSS protection, and regular security audits.",
          "source": "Web Security Handbook",
          "source_type": "document"
        }
      ]
    },
    {
      "id": "tech_005",
      "category": "Performance",
      "query": "How can I improve the performance of a React application?",
      "expected_keywords": ["React", "performance", "optimization", "rendering", "components"],
      "expected_tone": "technical",
      "success_criteria": {
        "min_score": 8,
        "must_include_citations": true,
        "should_include_code_examples": true
      },
      "sample_chunks": [
        {
          "text": "React performance optimization techniques include: using React.memo for component memoization, implementing proper key props in lists, lazy loading components with React.lazy, optimizing re-renders, and using the React DevTools Profiler.",
          "source": "React Performance Guide",
          "source_type": "document"
        }
      ]
    }
  ]
} 